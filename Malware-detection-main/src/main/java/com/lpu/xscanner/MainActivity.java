
package com.lpu.xscanner;

import static android.os.Build.VERSION.SDK_INT;

import android.Manifest;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.provider.Settings;
import android.text.InputType;
import android.text.method.ScrollingMovementMethod;
import android.view.Menu;
import android.view.MenuItem;
import android.view.WindowManager;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;

import java.io.File;
import java.util.HashSet;

public class MainActivity extends AppCompatActivity {

    private SharedPreferences prefs = null;
    private MalwareScanner malwareScanner = null;

    private TextView logView;
    private Menu menu;

    private static final String buildVersionName = BuildConfig1.VERSION_NAME;

    private boolean scanSystem = false;
    private boolean scanApps = true;
    private boolean scanInternal = true;
    private boolean scanExternal = false;

    private static final int REQUEST_PERMISSION_EXTERNAL_STORAGE = 0;
    private Toolbar toolbar;

    @Override
    protected final void onCreate(Bundle savedInstanceState) {

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            getWindow().clearFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
        }
        super.onCreate(savedInstanceState);
        Utils.setContext(getApplicationContext());
        setContentView(R.layout.content_main);
        toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        getSupportActionBar().setHomeButtonEnabled(true);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);

        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON | WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);

        logView = findViewById(R.id.txtLogOutput);
        logView.setMovementMethod(new ScrollingMovementMethod());
        logView.setTextIsSelectable(true);

//        logView.append(getString(R.string.app_copyright) + "\n");
//        logView.append(getString(R.string.app_license) + "\n");
        logView.append(getString(R.string.app_version, buildVersionName) + "\n");
        logView.append(getString(R.string.app_db_type_clamav) + "\n\n");

        malwareScanner = new MalwareScanner(this, this, true);

        prefs = getSharedPreferences(BuildConfig1.APPLICATION_ID, Context.MODE_PRIVATE);

        requestPermissions();

        Utils.considerStartService(this);
    }

    @Override
    public final boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_main, menu);
        this.menu = menu;
        menu.findItem(R.id.toggleRealtime).setChecked(Utils.isServiceRunning(MalwareScannerService.class, this));
        // menu.findItem(R.id.toggleOnionRouting).setChecked(prefs.getBoolean("ONION_ROUTING", false));
        updateScanButton(false);
        return true;
    }

    private void requestPermissions() {
        if (SDK_INT >= Build.VERSION_CODES.M) {
            if (checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_PERMISSION_EXTERNAL_STORAGE);
            }
        }
        if (SDK_INT >= Build.VERSION_CODES.R) {
            if (!Environment.isExternalStorageManager()) {
                Intent intent = new Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION);
                Uri uri = Uri.fromParts("package", getPackageName(), null);
                intent.setData(uri);
                startActivity(intent);
            }
        }
    }

    private String localizeDBDescription(String desc) {
        return desc
                .replaceAll("AUTHOR", getString(R.string.db_desc_author))
                .replaceAll("LICENSE", getString(R.string.db_desc_license))
                .replaceAll("SIZE_SMALL", getString(R.string.db_desc_size_small))
                .replaceAll("SIZE_MEDIUM", getString(R.string.db_desc_size_medium))
                .replaceAll("SIZE_LARGE", getString(R.string.db_desc_size_large))
                .replaceAll("SIZE", getString(R.string.db_desc_size))
                .replaceAll("SOURCE", getString(R.string.db_desc_source));
    }

    private void selectDatabases() {
        final String[] databases = {
                localizeDBDescription("ClamAV: Android Only\n • SIZE: SIZE_MEDIUM\n • LICENSE: GPL-2.0\n • AUTHOR: Cisco\n • SOURCE: https://clamav.net\n"),
                localizeDBDescription("ClamAV: Main\n • SIZE: SIZE_LARGE\n • LICENSE: GPL-2.0\n • AUTHOR: Cisco\n • SOURCE: https://clamav.net\n"),
                localizeDBDescription("ClamAV: Daily\n • SIZE: SIZE_LARGE\n • LICENSE: GPL-2.0\n • AUTHOR: Cisco\n • SOURCE: https://clamav.net\n"),
                localizeDBDescription("ESET\n • SIZE: SIZE_SMALL\n • LICENSE: BSD 2-Clause\n • AUTHOR: ESET\n • SOURCE: https://github.com/eset/malware-ioc\n"),
                localizeDBDescription("Targeted Threats\n • SIZE: SIZE_SMALL\n • LICENSE: CC BY-SA 4.0\n • AUTHOR: Nex\n • SOURCE: https://github.com/botherder/targetedthreats\n"),
                localizeDBDescription("Amnesty Tech Investigations\n • SIZE: SIZE_SMALL\n • LICENSE: CC BY 2.0\n • AUTHOR: Amnesty International\n • SOURCE: https://github.com/amnestytech/investigations\n"),
                localizeDBDescription("Stalkerware\n • SIZE: SIZE_SMALL\n • LICENSE: CC BY 4.0\n • AUTHOR: Echap\n • SOURCE: https://github.com/AssoEchap/stalkerware-indicators")};
        final boolean[] databaseDefaults = {
                prefs.getBoolean("SIGNATURES_CLAMAV-ANDROID", true),
                prefs.getBoolean("SIGNATURES_CLAMAV-MAIN", true),
                prefs.getBoolean("SIGNATURES_CLAMAV-DAILY", true),
                prefs.getBoolean("SIGNATURES_ESET", true),
                prefs.getBoolean("SIGNATURES_TARGETEDTHREATS", true),
                prefs.getBoolean("SIGNATURES_AMNESTY", true),
                prefs.getBoolean("SIGNATURES_STALKERWARE", true)};

        Dialog databaseDialog;
        AlertDialog.Builder databaseBuilder = new AlertDialog.Builder(this);
        databaseBuilder.setTitle(R.string.lblSelectDatabasesTitle);

        databaseBuilder.setMultiChoiceItems(databases, databaseDefaults, (dialogInterface, i, selected) -> databaseDefaults[i] = selected);
        databaseBuilder.setPositiveButton("OK", (dialogInterface, i) -> {
            prefs.edit().putBoolean("SIGNATURES_CLAMAV-ANDROID", databaseDefaults[0]).apply();
            prefs.edit().putBoolean("SIGNATURES_CLAMAV-MAIN", databaseDefaults[1]).apply();
            prefs.edit().putBoolean("SIGNATURES_CLAMAV-DAILY", databaseDefaults[2]).apply();
            prefs.edit().putBoolean("SIGNATURES_ESET", databaseDefaults[3]).apply();
            prefs.edit().putBoolean("SIGNATURES_TARGETEDTHREATS", databaseDefaults[4]).apply();
            prefs.edit().putBoolean("SIGNATURES_AMNESTY", databaseDefaults[5]).apply();
            prefs.edit().putBoolean("SIGNATURES_STALKERWARE", databaseDefaults[6]).apply();
        });

        databaseDialog = databaseBuilder.create();
        databaseDialog.show();
    }

    @Override
    public final boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.mnuUpdateDatabase:
                if (malwareScanner.running) {
                    logView.append(getString(R.string.lblScanRunning) + "\n");
                } else {
                    if (prefs.getBoolean("ONION_ROUTING", false)) {
                        Utils.requestStartOrbot(this);
                        logView.append(getString(R.string.lblOnionRoutingEnabledHint) + "\n");
                    }
                    updateDatabase();
                }
                break;
            case R.id.mnuSelectDatabases:
                selectDatabases();
                break;
            case R.id.mnuDatabaseServer:
                AlertDialog.Builder builderServerOverride = new AlertDialog.Builder(this);
                builderServerOverride.setTitle(getString(R.string.lblDatabaseServer));
                final EditText inputServerOverride = new EditText(this);
                inputServerOverride.setInputType(InputType.TYPE_CLASS_TEXT);
                inputServerOverride.setText(Utils.getDatabaseURL(this));
                builderServerOverride.setView(inputServerOverride);
                builderServerOverride.setPositiveButton(getString(R.string.lblOverride), (dialog, which) -> {
                    String newServer = inputServerOverride.getText().toString();
                    if (!newServer.endsWith("/")) {
                        newServer += "/";
                    }
                    prefs.edit().putString("DATABASE_SERVER", newServer).apply();
                });
                builderServerOverride.setNegativeButton(getString(R.string.lblReset), (dialog, which) -> {
                    prefs.edit().putString("DATABASE_SERVER", Utils.DATABASE_URL_DEFAULT).apply();
                    dialog.cancel();
                });
                builderServerOverride.show();
                break;
            case R.id.mnuSigningKey:
                AlertDialog.Builder builderKey = new AlertDialog.Builder(this);
                builderKey.setTitle(getString(R.string.lblSigningKey));
                final EditText inputKey = new EditText(this);
                inputKey.setInputType(InputType.TYPE_CLASS_TEXT);
                inputKey.setText(Utils.getSigningKey(this));
                builderKey.setView(inputKey);
                builderKey.setPositiveButton(getString(R.string.lblOverride), (dialog, which) -> prefs.edit().putString("SIGNING_KEY", inputKey.getText().toString()).apply());
                builderKey.setNegativeButton(getString(R.string.lblReset), (dialog, which) -> {
                    prefs.edit().putString("SIGNING_KEY", Utils.SIGNING_KEY_DEFAULT).apply();
                    dialog.cancel();
                });
                builderKey.show();
                break;
            case R.id.toggleRealtime:
                if (malwareScanner.running) {
                    logView.append(getString(R.string.lblScanRunning) + "\n");
                } else {
                    Intent realtimeScanner = new Intent(getApplicationContext(), MalwareScannerService.class);
                    if (!item.isChecked()) {
                        prefs.edit().putBoolean("autostart", true).apply();
                        Utils.considerStartService(this);
                    } else {
                        stopService(realtimeScanner);
                        prefs.edit().putBoolean("autostart", false).apply();
                    }
                    item.setChecked(!item.isChecked());
                }
                break;
            case R.id.mnuScanSystem:
                scanSystem = !item.isChecked();
                item.setChecked(scanSystem);
                break;
            case R.id.mnuScanApps:
                scanApps = !item.isChecked();
                item.setChecked(scanApps);
                break;
            case R.id.mnuScanInternal:
                scanInternal = !item.isChecked();
                item.setChecked(scanInternal);
                break;
            case R.id.mnuScanExternal:
                scanExternal = !item.isChecked();
                item.setChecked(scanExternal);
                break;
//            case R.id.mnuFullCredits:
//                showCredits();
//                break;
            case android.R.id.home:
                super.onBackPressed();
                break;
            case R.id.btnStartScan:
                if (!malwareScanner.running) {
                    updateScanButton(true);
                    startScanner();
                } else {
                    logView.append("\n" + getString(R.string.main_cancelling_scan) + "\n\n");
                    malwareScanner.cancel(true);
                    malwareScanner.running = false;
                }

        }
        return super.onOptionsItemSelected(item);
    }

    private void startScanner() {
        malwareScanner = new MalwareScanner(this, this, true);
        malwareScanner.running = true;
        HashSet<File> filesToScan = new HashSet<>();
        if (scanSystem) {
            filesToScan.add(Environment.getRootDirectory());
        }
        if (scanApps) {
            for (ApplicationInfo packageInfo : getPackageManager().getInstalledApplications(PackageManager.GET_META_DATA)) {
                filesToScan.add(new File(packageInfo.sourceDir));
            }
        }
        if (scanInternal) {
            filesToScan.add(Environment.getExternalStorageDirectory());
        }
        if (scanExternal) {
            filesToScan.add(new File("/storage"));
        }


        malwareScanner.executeOnExecutor(Utils.getThreadPoolExecutor(), filesToScan);
        new Thread(() -> {
            try {
                while (malwareScanner.running) {
                    Thread.sleep(500);
                }
                runOnUiThread(() -> updateScanButton(false));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }).start();
    }

    private void updateDatabase() {
        new Database(findViewById(R.id.txtLogOutput));
        Database.updateDatabase(this, Database.signatureDatabases);
        if (Database.isDatabaseLoaded()) {
            Utils.getThreadPoolExecutor().execute(() -> Database.loadDatabase(getApplicationContext(), true, Database.signatureDatabases));
        }
    }

    private void updateScanButton(boolean running) {
        if (menu == null || menu.findItem(R.id.btnStartScan) == null) {
            return;
        }
        if (running) {
            if (SDK_INT >= Build.VERSION_CODES.O) {
                menu.findItem(R.id.btnStartScan).setIconTintList(getColorStateList(R.color.colorRed));
            }
            if (SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                menu.findItem(R.id.btnStartScan).setIcon(getDrawable(android.R.drawable.ic_menu_close_clear_cancel));
            }
        } else {
            if (SDK_INT >= Build.VERSION_CODES.O) {
                menu.findItem(R.id.btnStartScan).setIconTintList(getColorStateList(R.color.colorGreen));
            }
            if (SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                menu.findItem(R.id.btnStartScan).setIcon(getDrawable(android.R.drawable.ic_media_play));
            }
        }
    }

}
